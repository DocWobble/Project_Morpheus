# DECISIONS.log

> ADR-style, but ruthless. One entry per consequential choice.  
> Append-only; if superseded, add `Superseded-By:` and status `REPLACED`.

## Entry Template

### [YYYY-MM-DD] <short handle>

- **Context:** <why a choice was necessary; constraints at play>
- **Decision:** <the chosen path in one or two sentences>
- **Alternatives:** <bulleted, only those genuinely considered>
- **Trade-offs:** <what we accept to get the outcome>
- **Scope:** <surfaces or modules affected>
- **Impact:** <capabilities enabled/disabled; risks introduced>
- **TTL / Review:** <when to re-evaluate, if applicable>
- **Status:** ACTIVE | REPLACED | REJECTED | BLOCKED
- **Links:** <PRs, scenes, interface entries, goal names>

_(New entries go on top. Keep each under ~20 lines.)_
### [2025-10-24] orpheus-cpp-default

- **Context:** Remote `ORPHEUS_API_URL` checks lingered despite local `orpheus_cpp` engine being the primary path.
- **Decision:** Drop API URL requirements, isolate remote helpers, and register `orpheus_cpp` as the default adapter.
- **Alternatives:** Keep mixed local/remote logic in `inference.py`.
- **Trade-offs:** Remote API helpers move to a separate module requiring explicit import.
- **Scope:** `Morpheus_Client/tts_engine`, `Morpheus_Client/server.py`, `README.md`.
- **Impact:** Simplifies configuration and clarifies in-process synthesis.
- **TTL / Review:** Revisit if remote backends become first-class.
- **Status:** ACTIVE
- **Links:** N/A
### [2025-10-15] admin-config-cleanup

- **Context:** Admin UI retained FastAPI branding and referenced a non-existent restart endpoint; config selectors omitted voice, adapter, and source.
- **Decision:** Drop FastAPI branding and restart controls, and wire voice, adapter, and text-source selectors through `/config`.
- **Alternatives:** Keep legacy branding and dead controls.
- **Trade-offs:** Slightly more client-side code; removes explicit restart flow.
- **Scope:** `Morpheus_Client/admin/tts.html`.
- **Impact:** UI aligns with current config API; removes broken endpoints.
- **TTL / Review:** revisit when admin features grow.
- **Status:** ACTIVE
- **Links:** interfaces config-endpoint
### [2025-09-30] orpheus-cpp-required

- **Context:** Starting the service without `orpheus_cpp` led to runtime failures during synthesis.
- **Decision:** Pin `orpheus-cpp` and abort startup with a descriptive error when the module is missing.
- **Alternatives:** Import on first use and fail lazily; rely on an external service for synthesis.
- **Trade-offs:** Adds a native build step that increases installation time.
- **Scope:** `requirements.txt`, `scripts/start.py`, `README.md`.
- **Impact:** Predictable startup behaviour and clearer dependency expectations.
- **TTL / Review:** Revisit if a pure-Python or remote backend becomes default.
- **Status:** ACTIVE
- **Links:** goal orpheus-cpp-startup-check, tests/test_start_requires_orpheus_cpp.py
### [2025-09-21] fastapi-migration

- **Context:** Docs and configs still referenced FastAPI though the service now runs on a lightweight ASGI stack.
- **Decision:** Purge FastAPI references and document the single ASGI service exposing `/v1/audio/speech`, `/config`, `/stats`, and `/admin`.
- **Alternatives:** Keep FastAPI terminology and partial code paths.
- **Trade-offs:** Lose FastAPI conveniences like automatic docs and dependency injection.
- **Scope:** `AGENTS.md`, `GOALS.md`, `README.md`, `INTERFACES.md`.
- **Impact:** Aligns repository language with actual architecture; reduces confusion.
- **TTL / Review:** Revisit if a higher-level framework is reintroduced.
- **Status:** ACTIVE
- **Links:** goals standalone-orchestrator, admin-interface; interfaces speech-endpoint, config-endpoint, stats-endpoint, admin-endpoint

### [2025-09-19] start-entrypoint

- **Context:** Simplify local launch and persist config in home directory.
- **Decision:** Use scripts/start.py as single entrypoint that loads ~/.morpheus/config and opens the admin UI; remove main.py and old start scripts.
- **Alternatives:** Keep main.py and one-click shell scripts.
- **Trade-offs:** Removes automatic dependency installation.
- **Scope:** scripts/start.py, start scripts, README.md.
- **Impact:** Unified startup, persistent config, and browser auto-launch.
- **TTL / Review:** Revisit if startup workflow changes.
- **Status:** ACTIVE
- **Links:** goal auto-start-config

### [2025-09-18] retire-orfastapi

- **Context:** A legacy FastAPI module duplicated the unified Morpheus Client server.
- **Decision:** Remove the legacy module, migrate remaining assets, and update start scripts and docs.
- **Alternatives:** Keep the old module alongside the new server.
- **Trade-offs:** Loss of historical code; any missing functionality must be re-added to the client.
- **Scope:** start scripts, tests, documentation, `Morpheus_Client/admin` assets.
- **Impact:** Single launch path via `main.py`; no lingering imports of the removed module.
- **TTL / Review:** Revisit if a separate API service is required again.
- **Status:** active
- **Links:** n/a
### [2025-09-06] consolidate-requirements

- **Context:** Multiple hardware-specific requirement files complicated installation.
- **Decision:** Collapse them into a single pinned requirements.txt with hardware notes and update setup scripts.
- **Alternatives:** Keep separate requirement sets per platform.
- **Trade-offs:** Users must manually install GPU extras.
- **Scope:** requirements.txt, scripts/install.py, scripts/one_click.py, README.md.
- **Impact:** Simplifies dependency management and documentation.
- **TTL / Review:** Revisit if automated GPU package resolution is needed.
- **Status:** ACTIVE
- **Links:** goal unified-dependency-management
### [2025-09-01] single-service-architecture

- **Context:** Prior repos split orchestration and admin surfaces; deployment required coordinating multiple services.
- **Decision:** Consolidate into one service exposing `/stats`, `/config`, and `/admin` with `.env`-based configuration.
- **Alternatives:** Maintain separate processes for TTS generation, control plane, and UI; shell scripts per component.
- **Trade-offs:** Sacrifices modular scaling but simplifies local runs and scene coverage.
- **Scope:** `Morpheus_Client/server.py`, runtime config paths, admin endpoints.
- **Impact:** Enables standalone orchestrator, admin interface, and direct inference integration.
- **TTL / Review:** Revisit when horizontal scaling or process isolation is required.
- **Status:** ACTIVE
- **Links:** goals standalone-orchestrator, admin-interface, direct-inference-integration; interfaces /stats, /config, /admin
### [2025-08-18] decisions-log-canonical

- **Context:** Repository contained `DECISIONS.md` while documentation referenced `DECISIONS.log`, causing inconsistency.
- **Decision:** Rename the decision log to `DECISIONS.log` and update references for a single canonical filename.
- **Alternatives:** Keep `DECISIONS.md` and adjust all docs.
- **Trade-offs:** `.log` extension receives less automatic Markdown tooling.
- **Scope:** repository metadata files.
- **Impact:** Eliminates confusion about where to record decisions.
- **TTL / Review:** Revisit if extension hampers collaboration.
- **Status:** ACTIVE
- **Links:** this PR

### [2025-08-30] cli-exitcode-refactor

- **Context:** Subcommands invoked std::process::exit directly, complicating error handling and testing.
- **Decision:** Return ExitCode from `cli_main` and exit once in `main`.
- **Alternatives:** Keep multiple exit points within subcommands.
- **Trade-offs:** Requires threading exit codes through call sites.
- **Scope:** `codex-rs/cli`, `codex-rs/arg0`.
- **Impact:** Centralizes process termination and enables integration tests to assert exact exit codes.
- **TTL / Review:** Revisit if CLI architecture changes.
- **Status:** ACTIVE
- **Links:** goal cli-exit-code-centralization


### [2025-08-29] cli-path-dedup

- **Context:** Repeated CLI launches added duplicate directories to `PATH` causing unbounded growth.
- **Decision:** Skip directories already present in `PATH` when computing the updated value.
- **Alternatives:** Keep existing behavior and allow duplicates.
- **Trade-offs:** Slight increase in startup logic complexity.
- **Scope:** `codex-cli/bin/codex.js`.
- **Impact:** CLI startup is idempotent with respect to environment `PATH`.
- **TTL / Review:** Revisit if environment handling changes.
- **Status:** ACTIVE
- **Links:** goal cli-path-deduplication; `codex-cli/test/path.test.js`

### [2025-08-17] missing-sandbox-error

- **Context:** `codex-cli` panicked when the `codex-linux-sandbox` binary was missing.
- **Decision:** Return a descriptive error instead of panicking so users understand the failure.
- **Alternatives:** Keep using `.expect` and crash.
- **Trade-offs:** Slightly more code; reliance on error handling.
- **Scope:** `codex-rs/cli` sandbox command path.
- **Impact:** CLI fails gracefully when Landlock sandbox is requested without the binary.
- **TTL / Review:** Revisit if sandbox architecture changes.
- **Status:** ACTIVE
- **Links:** See PR for missing sandbox executable handling.

### [2025-08-19] login-result-handling

- **Context:** Login helpers exited the process directly, making reuse and testing difficult.
- **Decision:** Return `Result`/status enums from login helpers and manage exits in `main.rs`.
- **Alternatives:** Keep process termination inside helper functions.
- **Trade-offs:** More boilerplate in the caller; functions now expose additional types.
- **Scope:** `codex-rs/cli` login module and main entrypoint.
- **Impact:** Enables programmatic control over login flows and clearer testing.
- **TTL / Review:** Revisit when authentication flow changes.
- **Status:** ACTIVE
- **Links:** goal result-based-login
### [2025-09-02] central-config-module

- **Context:** configuration helpers were duplicated across `main.py` and the server module.
- **Decision:** centralize env file utilities and config API routes in `Morpheus_Client.config`.
- **Alternatives:** keep separate implementations in each module.
- **Trade-offs:** introduces a new package; minor import overhead.
- **Scope:** `Morpheus_Client/config.py`, `main.py`, `Morpheus_Client/server.py`.
- **Impact:** shared configuration logic and API surface; easier future reuse.
- **TTL / Review:** revisit when configuration loading changes.
- **Status:** active
- **Links:** n/a
### [2025-08-18] morpheus-client-endpoints
- **Context:** Morpheus Client lacked introspection APIs for voices and adapters.
- **Decision:** Add `/v1/audio/voices` and `/adapters` endpoints reusing logic from the legacy service.
- **Alternatives:** Rely solely on that separate service for capability discovery.
- **Trade-offs:** Duplicates minimal logic; adds another API surface to maintain.
- **Scope:** `Morpheus_Client/server.py`, `INTERFACES.md`.
- **Impact:** Clients can query available voices and adapter capabilities directly.
- **TTL / Review:** revisit when services consolidate.
- **Status:** active
- **Links:** goal morpheus-client-introspection
### [2025-09-02] admin-static-mount

- **Context:** The admin TTS UI lived only in a separate service and wasn't available through the consolidated client.
- **Decision:** Copy the template and favicon into `Morpheus_Client/admin` and serve them via `/admin`.
- **Alternatives:** Continue relying on that external service for admin access.
- **Trade-offs:** Duplicates assets and requires future sync.
- **Scope:** `Morpheus_Client/admin`, `Morpheus_Client/server.py`, `Morpheus_Client/config.py`.
- **Impact:** Admin interface assets are accessible from the client service.
- **TTL / Review:** revisit when UI unification completes.
- **Status:** active
- **Links:** goal admin-interface
### [2025-09-02] admin-favicon-svg

- **Context:** Binary favicon blocked pull request generation.
- **Decision:** Replace `.ico` with a text-based `favicon.svg` and update the admin template.
- **Alternatives:** Keep binary icon and accept PR tooling limitation.
- **Trade-offs:** Simplified icon; avoids binary files in repository.
- **Scope:** `Morpheus_Client/admin/tts.html`, `Morpheus_Client/admin/static/favicon.svg`.
- **Impact:** Admin interface assets remain mergeable while providing a visual icon.
- **TTL / Review:** revisit when branding assets stabilize.
- **Status:** active
- **Links:** goal admin-interface

### [2025-09-05] morpheus-client-rename

- **Context:** The codebase exposed `morpheus_tts` for core TTS functions while the admin/API lived under `Morpheus_Client`, leading to split imports.
- **Decision:** Rename `morpheus_tts` to `Morpheus_Client` and merge the admin and TTS server under one package with a single `start_server` entrypoint.
- **Alternatives:** Keep dual packages and bridge imports manually.
- **Trade-offs:** External references must update to the new package name.
- **Scope:** `Morpheus_Client/server.py`, `main.py`, `scenes/*`, `tests/*`.
- **Impact:** Unified import path `Morpheus_Client.*` and consolidated API/admin launch.
- **TTL / Review:** review after first release.
- **Status:** active
- **Links:** goal morpheus-client-introspection

### [2025-09-08] orchestrator-timeline

- **Context:** Need visibility into orchestrator stages and live stats.
- **Decision:** Emit `{stage,duration_ms,result}` events, persist to `SCENES/_artifacts/timeline.json`, and expose `/stats` API.
- **Alternatives:** Rely solely on logging without structured timeline.
- **Trade-offs:** In-memory event list may grow without bounds.
- **Scope:** `Morpheus_Client/orchestrator/core.py`, `scenes/utils.py`, `Morpheus_Client/server.py`.
- **Impact:** Enables live monitoring and replayable transcripts.
- **TTL / Review:** review after initial deployment.
- **Status:** active
- **Links:** goal streaming-telemetry

### [2025-09-14] text-source-adapters

- **Context:** Need to ingest text from multiple origins for synthesis.
- **Decision:** Introduce `TextSource` protocol with adapters for WebSocket, HTTP polling and CLI pipes.
- **Alternatives:** Hardcode a single input mechanism.
- **Trade-offs:** Additional registry and configuration surface.
- **Scope:** `text_sources/*`, `Morpheus_Client/server.py`, `ADAPTERS.md`, `INTERFACES.md`.
- **Impact:** Text sources are pluggable and selectable via `/config`.
- **TTL / Review:** revisit when more sources are required.
- **Status:** active
- **Links:** goal pluggable-text-sources

### [2025-08-19] starlette-router

- **Context:** Reduce dependency weight for HTTP and WebSocket handling.
- **Decision:** Replace FastAPI server with a Starlette-based ASGI app.
- **Alternatives:** Keep FastAPI.
- **Trade-offs:** Manual request parsing; fewer built-in features.
- **Scope:** `Morpheus_Client/server.py`, `Morpheus_Client/client.py`.
- **Impact:** Lighter runtime while preserving public API.
- **TTL / Review:** revisit when advanced routing/features are required.
- **Status:** active
- **Links:** –

### [2025-09-26] fastapi-cleanup

- **Context:** Starlette migration left behind FastAPI-specific imports and dependencies.
- **Decision:** Purge FastAPI from tests and requirements; simplify config utilities to avoid FastAPI.
- **Alternatives:** Retain FastAPI modules alongside Starlette.
- **Trade-offs:** Fewer helper utilities from FastAPI.
- **Scope:** `requirements.txt`, `tests/test_stats_endpoint.py`, `Morpheus_Client/config.py`.
- **Impact:** Leaner dependency graph and tests target the Starlette ASGI app.
- **TTL / Review:** revisit if configuration endpoints need richer framework support.
- **Status:** active
- **Links:** –

### [2025-10-09] config-persistence

- **Context:** Configuration changes via the API were volatile and lost on restart.
- **Decision:** Expose `GET /config` and persist `POST /config` updates through `Morpheus_Client.config.save_config`.
- **Alternatives:** Keep in-memory configuration only.
- **Trade-offs:** `.env` rewrites may race under concurrent updates.
- **Scope:** `Morpheus_Client/server.py`, `INTERFACES.md`, `tests/test_text_sources.py`.
- **Impact:** Config changes round-trip through `.env` and survive restarts.
- **TTL / Review:** revisit when multi-user config or locking is needed.
- **Status:** active
- **Links:** goal admin-interface

### [2025-10-24] source-runner

- **Context:** Text sources were selectable but not consumed automatically.
- **Decision:** Instantiate sources via registry and stream their output to `orchestrated_pcm_stream` in a background task.
- **Alternatives:** Require manual piping for each request.
- **Trade-offs:** Introduces an additional long-lived asyncio task per active source.
- **Scope:** `Morpheus_Client/server.py`, `tests/test_text_sources.py`.
- **Impact:** WebSocket and CLI feeds drive synthesis without bespoke wiring.
- **TTL / Review:** review when multiple concurrent sources are supported.
- **Status:** active
- **Links:** goal pluggable-text-sources

### [2025-10-30] orchestrator-transcripts

- **Context:** Need to retain utterance text for replay and operator insight.
- **Decision:** Record `{timestamp,text}` per utterance, expose transcripts via `/stats`, and persist them to `SCENES/_artifacts/transcripts.json`.
- **Alternatives:** Depend solely on unstructured logs.
- **Trade-offs:** Transcript list grows unbounded; potential privacy concerns.
- **Scope:** `Morpheus_Client/orchestrator/core.py`, `Morpheus_Client/server.py`, `scenes/utils.py`, `tests/*`.
- **Impact:** Enables replayable transcript history alongside timeline events.
- **TTL / Review:** revisit when persistence or pruning is required.
- **Status:** active
- **Links:** goal transcript-history

### [2025-08-19] user-config-precedence

- **Context:** Configuration persisted only to repo-level `.env`, forcing manual merges across checkouts.
- **Decision:** Mirror saved config to `~/.morpheus/config` and load it before `.env` at startup.
- **Alternatives:** Rely solely on `.env` in the repository.
- **Trade-offs:** Two config files may drift without tooling.
- **Scope:** `Morpheus_Client/config.py`, `scripts/start.py`, `.env.example`.
- **Impact:** User-specific configuration persists outside the repository and overrides `.env` values.
- **TTL / Review:** revisit when multi-user setups or locking are required.
- **Status:** active
- **Links:** goal user-config-precedence

### [2025-08-19] admin-voices-runtime

- **Context:** Admin template embedded voice and language options via Jinja, preventing `/admin` from being served purely as static assets.
- **Decision:** Remove server-side templating and fetch voices and languages from `/v1/audio/voices` at runtime.
- **Alternatives:** Pre-render voices into HTML during build.
- **Trade-offs:** Adds client-side rendering dependency and requires API availability on initial load.
- **Scope:** `Morpheus_Client/admin/tts.html`, `Morpheus_Client/server.py`, `tests/test_admin_dynamic_voices.py`
- **Impact:** `/admin` assets are static and voice lists stay in sync with backend at runtime.
- **TTL / Review:** revisit if voices endpoint becomes unstable or large.
- **Status:** active
- **Links:** goal admin-voices-runtime

